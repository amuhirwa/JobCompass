from django.db import models
from taxonomy.models import Occupation, Skill
import uuid


class MarketInsight(models.Model):
    """Market insights for occupations generated by AI"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    occupation = models.OneToOneField(
        Occupation, 
        on_delete=models.CASCADE, 
        related_name='market_insight'
    )
    average_salary = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    growth_rate = models.FloatField(help_text="Growth rate percentage", null=True, blank=True)
    remote_opportunities_percentage = models.FloatField(
        help_text="Percentage of remote job opportunities", 
        null=True, 
        blank=True
    )
    demand_level = models.CharField(
        max_length=20,
        choices=[
            ('low', 'Low'),
            ('medium', 'Medium'),
            ('high', 'High'),
            ('very_high', 'Very High'),
        ],
        null=True,
        blank=True
    )
    market_trends = models.TextField(blank=True, help_text="AI-generated market trends analysis")
    key_regions = models.JSONField(default=list, help_text="List of key regions with demand")
    industry_outlook = models.TextField(blank=True, help_text="Industry outlook analysis")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Market Insight for {self.occupation.preferred_label}"

    class Meta:
        db_table = 'ai_market_insights'


class CareerPath(models.Model):
    """Career progression paths for occupations"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    occupation = models.ForeignKey(
        Occupation, 
        on_delete=models.CASCADE, 
        related_name='career_paths'
    )
    path_name = models.CharField(max_length=255, help_text="Name of the career path")
    description = models.TextField(help_text="Description of the career progression")
    estimated_duration = models.CharField(
        max_length=100, 
        help_text="Estimated time to progress through path"
    )
    difficulty_level = models.CharField(
        max_length=20,
        choices=[
            ('beginner', 'Beginner'),
            ('intermediate', 'Intermediate'),
            ('advanced', 'Advanced'),
            ('expert', 'Expert'),
        ]
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.path_name} - {self.occupation.preferred_label}"

    class Meta:
        db_table = 'ai_career_paths'


class CareerStep(models.Model):
    """Individual steps in a career path"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    career_path = models.ForeignKey(
        CareerPath, 
        on_delete=models.CASCADE, 
        related_name='steps'
    )
    step_number = models.PositiveIntegerField()
    title = models.CharField(max_length=255)
    description = models.TextField()
    estimated_duration = models.CharField(
        max_length=100, 
        help_text="Estimated time for this step"
    )
    requirements = models.TextField(help_text="Requirements to reach this step")
    typical_salary_range = models.CharField(
        max_length=100, 
        blank=True,
        help_text="Typical salary range for this level"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Step {self.step_number}: {self.title}"

    class Meta:
        db_table = 'ai_career_steps'
        ordering = ['step_number']
        unique_together = ['career_path', 'step_number']


class CareerStepSkill(models.Model):
    """Skills required for each career step"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    career_step = models.ForeignKey(
        CareerStep, 
        on_delete=models.CASCADE, 
        related_name='required_skills'
    )
    skill = models.ForeignKey(
        Skill, 
        on_delete=models.CASCADE, 
        related_name='career_steps'
    )
    importance_level = models.CharField(
        max_length=20,
        choices=[
            ('essential', 'Essential'),
            ('important', 'Important'),
            ('helpful', 'Helpful'),
            ('optional', 'Optional'),
        ],
        default='important'
    )
    proficiency_level = models.CharField(
        max_length=20,
        choices=[
            ('basic', 'Basic'),
            ('intermediate', 'Intermediate'),
            ('advanced', 'Advanced'),
            ('expert', 'Expert'),
        ],
        default='intermediate'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.skill.preferred_label} for {self.career_step.title}"

    class Meta:
        db_table = 'ai_career_step_skills'
        unique_together = ['career_step', 'skill']


class LearningResource(models.Model):
    """Learning resources for skills"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    skill = models.ForeignKey(
        Skill, 
        on_delete=models.CASCADE, 
        related_name='learning_resources'
    )
    title = models.CharField(max_length=255)
    description = models.TextField()
    resource_type = models.CharField(
        max_length=50,
        choices=[
            ('course', 'Online Course'),
            ('book', 'Book'),
            ('tutorial', 'Tutorial'),
            ('certification', 'Certification'),
            ('bootcamp', 'Bootcamp'),
            ('workshop', 'Workshop'),
            ('documentation', 'Documentation'),
            ('practice', 'Practice Platform'),
        ]
    )
    url = models.URLField(blank=True, help_text="Link to the resource")
    provider = models.CharField(max_length=255, blank=True)
    duration = models.CharField(max_length=100, blank=True)
    difficulty_level = models.CharField(
        max_length=20,
        choices=[
            ('beginner', 'Beginner'),
            ('intermediate', 'Intermediate'),
            ('advanced', 'Advanced'),
        ]
    )
    is_free = models.BooleanField(default=False)
    rating = models.FloatField(null=True, blank=True, help_text="Rating out of 5")
    cost = models.CharField(max_length=100, blank=True, help_text="Cost information")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.title} - {self.skill.preferred_label}"

    class Meta:
        db_table = 'ai_learning_resources'
